
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ac4  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d10  08001d10  00011d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d20  08001d20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d20  08001d20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d20  08001d20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d20  08001d20  00011d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d24  08001d24  00011d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001d34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001d34  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005a90  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e34  00000000  00000000  00025b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000550  00000000  00000000  00026950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003dd  00000000  00000000  00026ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e45a  00000000  00000000  0002727d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006092  00000000  00000000  000556d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00124d86  00000000  00000000  0005b769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000013f4  00000000  00000000  001804f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001818e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08001cf8 	.word	0x08001cf8

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08001cf8 	.word	0x08001cf8

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000290:	f000 fae0 	bl	8000854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000294:	f000 f826 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000298:	f000 f88a 	bl	80003b0 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(300);
 800029c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002a0:	f000 fb54 	bl	800094c <HAL_Delay>
	  GPIOB -> ODR ^= GPIO_PIN_0;  // Flash Green Led
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <main+0x4c>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a0b      	ldr	r2, [pc, #44]	; (80002d8 <main+0x4c>)
 80002aa:	f083 0301 	eor.w	r3, r3, #1
 80002ae:	6153      	str	r3, [r2, #20]
	  HAL_Delay(50);
 80002b0:	2032      	movs	r0, #50	; 0x32
 80002b2:	f000 fb4b 	bl	800094c <HAL_Delay>
	  GPIOF -> ODR ^= GPIO_PIN_4;  // Flash Amber Led
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <main+0x50>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a08      	ldr	r2, [pc, #32]	; (80002dc <main+0x50>)
 80002bc:	f083 0310 	eor.w	r3, r3, #16
 80002c0:	6153      	str	r3, [r2, #20]
	  HAL_Delay(50);
 80002c2:	2032      	movs	r0, #50	; 0x32
 80002c4:	f000 fb42 	bl	800094c <HAL_Delay>
	  GPIOG -> ODR ^= GPIO_PIN_4;  // Flash Amber Led
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <main+0x54>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <main+0x54>)
 80002ce:	f083 0310 	eor.w	r3, r3, #16
 80002d2:	6153      	str	r3, [r2, #20]
	  HAL_Delay(300);
 80002d4:	e7e2      	b.n	800029c <main+0x10>
 80002d6:	bf00      	nop
 80002d8:	42020400 	.word	0x42020400
 80002dc:	42021400 	.word	0x42021400
 80002e0:	42021800 	.word	0x42021800

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b09c      	sub	sp, #112	; 0x70
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0320 	add.w	r3, r7, #32
 80002ee:	2250      	movs	r2, #80	; 0x50
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 fcd4 	bl	8001ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	f107 0308 	add.w	r3, r7, #8
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
 8000308:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800030a:	4b28      	ldr	r3, [pc, #160]	; (80003ac <SystemClock_Config+0xc8>)
 800030c:	691b      	ldr	r3, [r3, #16]
 800030e:	4a27      	ldr	r2, [pc, #156]	; (80003ac <SystemClock_Config+0xc8>)
 8000310:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000314:	6113      	str	r3, [r2, #16]
 8000316:	4b25      	ldr	r3, [pc, #148]	; (80003ac <SystemClock_Config+0xc8>)
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000322:	bf00      	nop
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <SystemClock_Config+0xc8>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f003 0308 	and.w	r3, r3, #8
 800032c:	2b08      	cmp	r3, #8
 800032e:	d1f9      	bne.n	8000324 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000330:	2301      	movs	r3, #1
 8000332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000334:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033a:	2302      	movs	r3, #2
 800033c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800033e:	2303      	movs	r3, #3
 8000340:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000342:	2304      	movs	r3, #4
 8000344:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000346:	23fa      	movs	r3, #250	; 0xfa
 8000348:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800034a:	2302      	movs	r3, #2
 800034c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800034e:	2302      	movs	r3, #2
 8000350:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000352:	2302      	movs	r3, #2
 8000354:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000356:	2304      	movs	r3, #4
 8000358:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800035a:	2300      	movs	r3, #0
 800035c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	f107 0320 	add.w	r3, r7, #32
 8000366:	4618      	mov	r0, r3
 8000368:	f000 fd62 	bl	8000e30 <HAL_RCC_OscConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000372:	f000 f993 	bl	800069c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	231f      	movs	r3, #31
 8000378:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037a:	2303      	movs	r3, #3
 800037c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2105      	movs	r1, #5
 8000394:	4618      	mov	r0, r3
 8000396:	f001 f983 	bl	80016a0 <HAL_RCC_ClockConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80003a0:	f000 f97c 	bl	800069c <Error_Handler>
  }
}
 80003a4:	bf00      	nop
 80003a6:	3770      	adds	r7, #112	; 0x70
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	44020800 	.word	0x44020800

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08e      	sub	sp, #56	; 0x38
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003c6:	4bad      	ldr	r3, [pc, #692]	; (800067c <MX_GPIO_Init+0x2cc>)
 80003c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003cc:	4aab      	ldr	r2, [pc, #684]	; (800067c <MX_GPIO_Init+0x2cc>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80003d6:	4ba9      	ldr	r3, [pc, #676]	; (800067c <MX_GPIO_Init+0x2cc>)
 80003d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003dc:	f003 0310 	and.w	r3, r3, #16
 80003e0:	623b      	str	r3, [r7, #32]
 80003e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e4:	4ba5      	ldr	r3, [pc, #660]	; (800067c <MX_GPIO_Init+0x2cc>)
 80003e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003ea:	4aa4      	ldr	r2, [pc, #656]	; (800067c <MX_GPIO_Init+0x2cc>)
 80003ec:	f043 0304 	orr.w	r3, r3, #4
 80003f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80003f4:	4ba1      	ldr	r3, [pc, #644]	; (800067c <MX_GPIO_Init+0x2cc>)
 80003f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003fa:	f003 0304 	and.w	r3, r3, #4
 80003fe:	61fb      	str	r3, [r7, #28]
 8000400:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000402:	4b9e      	ldr	r3, [pc, #632]	; (800067c <MX_GPIO_Init+0x2cc>)
 8000404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000408:	4a9c      	ldr	r2, [pc, #624]	; (800067c <MX_GPIO_Init+0x2cc>)
 800040a:	f043 0320 	orr.w	r3, r3, #32
 800040e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000412:	4b9a      	ldr	r3, [pc, #616]	; (800067c <MX_GPIO_Init+0x2cc>)
 8000414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000418:	f003 0320 	and.w	r3, r3, #32
 800041c:	61bb      	str	r3, [r7, #24]
 800041e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000420:	4b96      	ldr	r3, [pc, #600]	; (800067c <MX_GPIO_Init+0x2cc>)
 8000422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000426:	4a95      	ldr	r2, [pc, #596]	; (800067c <MX_GPIO_Init+0x2cc>)
 8000428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800042c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000430:	4b92      	ldr	r3, [pc, #584]	; (800067c <MX_GPIO_Init+0x2cc>)
 8000432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4b8f      	ldr	r3, [pc, #572]	; (800067c <MX_GPIO_Init+0x2cc>)
 8000440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000444:	4a8d      	ldr	r2, [pc, #564]	; (800067c <MX_GPIO_Init+0x2cc>)
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800044e:	4b8b      	ldr	r3, [pc, #556]	; (800067c <MX_GPIO_Init+0x2cc>)
 8000450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	613b      	str	r3, [r7, #16]
 800045a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045c:	4b87      	ldr	r3, [pc, #540]	; (800067c <MX_GPIO_Init+0x2cc>)
 800045e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000462:	4a86      	ldr	r2, [pc, #536]	; (800067c <MX_GPIO_Init+0x2cc>)
 8000464:	f043 0302 	orr.w	r3, r3, #2
 8000468:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800046c:	4b83      	ldr	r3, [pc, #524]	; (800067c <MX_GPIO_Init+0x2cc>)
 800046e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000472:	f003 0302 	and.w	r3, r3, #2
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800047a:	4b80      	ldr	r3, [pc, #512]	; (800067c <MX_GPIO_Init+0x2cc>)
 800047c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000480:	4a7e      	ldr	r2, [pc, #504]	; (800067c <MX_GPIO_Init+0x2cc>)
 8000482:	f043 0308 	orr.w	r3, r3, #8
 8000486:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800048a:	4b7c      	ldr	r3, [pc, #496]	; (800067c <MX_GPIO_Init+0x2cc>)
 800048c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000490:	f003 0308 	and.w	r3, r3, #8
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000498:	4b78      	ldr	r3, [pc, #480]	; (800067c <MX_GPIO_Init+0x2cc>)
 800049a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800049e:	4a77      	ldr	r2, [pc, #476]	; (800067c <MX_GPIO_Init+0x2cc>)
 80004a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80004a8:	4b74      	ldr	r3, [pc, #464]	; (800067c <MX_GPIO_Init+0x2cc>)
 80004aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2110      	movs	r1, #16
 80004ba:	4871      	ldr	r0, [pc, #452]	; (8000680 <MX_GPIO_Init+0x2d0>)
 80004bc:	f000 fca0 	bl	8000e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2101      	movs	r1, #1
 80004c4:	486f      	ldr	r0, [pc, #444]	; (8000684 <MX_GPIO_Init+0x2d4>)
 80004c6:	f000 fc9b 	bl	8000e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2110      	movs	r1, #16
 80004ce:	486e      	ldr	r0, [pc, #440]	; (8000688 <MX_GPIO_Init+0x2d8>)
 80004d0:	f000 fc96 	bl	8000e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004da:	4b6c      	ldr	r3, [pc, #432]	; (800068c <MX_GPIO_Init+0x2dc>)
 80004dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e6:	4619      	mov	r1, r3
 80004e8:	4869      	ldr	r0, [pc, #420]	; (8000690 <MX_GPIO_Init+0x2e0>)
 80004ea:	f000 fb37 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004ee:	2310      	movs	r3, #16
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2300      	movs	r3, #0
 80004fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000502:	4619      	mov	r1, r3
 8000504:	485e      	ldr	r0, [pc, #376]	; (8000680 <MX_GPIO_Init+0x2d0>)
 8000506:	f000 fb29 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800050a:	2332      	movs	r3, #50	; 0x32
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050e:	2302      	movs	r3, #2
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000516:	2302      	movs	r3, #2
 8000518:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800051a:	230b      	movs	r3, #11
 800051c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800051e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000522:	4619      	mov	r1, r3
 8000524:	485a      	ldr	r0, [pc, #360]	; (8000690 <MX_GPIO_Init+0x2e0>)
 8000526:	f000 fb19 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800052a:	2386      	movs	r3, #134	; 0x86
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052e:	2302      	movs	r3, #2
 8000530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000536:	2302      	movs	r3, #2
 8000538:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800053a:	230b      	movs	r3, #11
 800053c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	4619      	mov	r1, r3
 8000544:	4853      	ldr	r0, [pc, #332]	; (8000694 <MX_GPIO_Init+0x2e4>)
 8000546:	f000 fb09 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800054a:	2310      	movs	r3, #16
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054e:	2303      	movs	r3, #3
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055a:	4619      	mov	r1, r3
 800055c:	484d      	ldr	r0, [pc, #308]	; (8000694 <MX_GPIO_Init+0x2e4>)
 800055e:	f000 fafd 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000562:	2301      	movs	r3, #1
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2300      	movs	r3, #0
 8000570:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000576:	4619      	mov	r1, r3
 8000578:	4842      	ldr	r0, [pc, #264]	; (8000684 <MX_GPIO_Init+0x2d4>)
 800057a:	f000 faef 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 800057e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000584:	2303      	movs	r3, #3
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000590:	4619      	mov	r1, r3
 8000592:	483c      	ldr	r0, [pc, #240]	; (8000684 <MX_GPIO_Init+0x2d4>)
 8000594:	f000 fae2 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059e:	2302      	movs	r3, #2
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a6:	2302      	movs	r3, #2
 80005a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005aa:	230b      	movs	r3, #11
 80005ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b2:	4619      	mov	r1, r3
 80005b4:	4833      	ldr	r0, [pc, #204]	; (8000684 <MX_GPIO_Init+0x2d4>)
 80005b6:	f000 fad1 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c0:	2302      	movs	r3, #2
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80005cc:	2307      	movs	r3, #7
 80005ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d4:	4619      	mov	r1, r3
 80005d6:	4830      	ldr	r0, [pc, #192]	; (8000698 <MX_GPIO_Init+0x2e8>)
 80005d8:	f000 fac0 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005dc:	2310      	movs	r3, #16
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f0:	4619      	mov	r1, r3
 80005f2:	4825      	ldr	r0, [pc, #148]	; (8000688 <MX_GPIO_Init+0x2d8>)
 80005f4:	f000 fab2 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <MX_GPIO_Init+0x2dc>)
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000608:	4619      	mov	r1, r3
 800060a:	481f      	ldr	r0, [pc, #124]	; (8000688 <MX_GPIO_Init+0x2d8>)
 800060c:	f000 faa6 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000610:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000616:	2302      	movs	r3, #2
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000622:	230a      	movs	r3, #10
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062a:	4619      	mov	r1, r3
 800062c:	4819      	ldr	r0, [pc, #100]	; (8000694 <MX_GPIO_Init+0x2e4>)
 800062e:	f000 fa95 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000632:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000640:	2302      	movs	r3, #2
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000644:	230b      	movs	r3, #11
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064c:	4619      	mov	r1, r3
 800064e:	480e      	ldr	r0, [pc, #56]	; (8000688 <MX_GPIO_Init+0x2d8>)
 8000650:	f000 fa84 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000654:	23c0      	movs	r3, #192	; 0xc0
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000664:	2308      	movs	r3, #8
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066c:	4619      	mov	r1, r3
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_GPIO_Init+0x2d4>)
 8000670:	f000 fa74 	bl	8000b5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000674:	bf00      	nop
 8000676:	3738      	adds	r7, #56	; 0x38
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	44020c00 	.word	0x44020c00
 8000680:	42021400 	.word	0x42021400
 8000684:	42020400 	.word	0x42020400
 8000688:	42021800 	.word	0x42021800
 800068c:	10110000 	.word	0x10110000
 8000690:	42020800 	.word	0x42020800
 8000694:	42020000 	.word	0x42020000
 8000698:	42020c00 	.word	0x42020c00

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <Error_Handler+0x8>

080006a6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <MemManage_Handler+0x4>

080006c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f000 f904 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800070e:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <SystemInit+0xdc>)
 8000710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000714:	4a33      	ldr	r2, [pc, #204]	; (80007e4 <SystemInit+0xdc>)
 8000716:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800071a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <SystemInit+0xe0>)
 8000720:	2201      	movs	r2, #1
 8000722:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <SystemInit+0xe0>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <SystemInit+0xe0>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000730:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <SystemInit+0xe0>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	492c      	ldr	r1, [pc, #176]	; (80007e8 <SystemInit+0xe0>)
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <SystemInit+0xe4>)
 8000738:	4013      	ands	r3, r2
 800073a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <SystemInit+0xe0>)
 800073e:	2200      	movs	r2, #0
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <SystemInit+0xe0>)
 8000744:	2200      	movs	r2, #0
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <SystemInit+0xe0>)
 800074a:	2200      	movs	r2, #0
 800074c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <SystemInit+0xe0>)
 8000750:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <SystemInit+0xe8>)
 8000752:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <SystemInit+0xe0>)
 8000756:	2200      	movs	r2, #0
 8000758:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <SystemInit+0xe0>)
 800075c:	4a24      	ldr	r2, [pc, #144]	; (80007f0 <SystemInit+0xe8>)
 800075e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <SystemInit+0xe0>)
 8000762:	2200      	movs	r2, #0
 8000764:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <SystemInit+0xe0>)
 8000768:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <SystemInit+0xe8>)
 800076a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <SystemInit+0xe0>)
 800076e:	2200      	movs	r2, #0
 8000770:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <SystemInit+0xe0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <SystemInit+0xe0>)
 8000778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <SystemInit+0xe0>)
 8000780:	2200      	movs	r2, #0
 8000782:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <SystemInit+0xdc>)
 8000786:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <SystemInit+0xec>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000794:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800079c:	d003      	beq.n	80007a6 <SystemInit+0x9e>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80007a4:	d117      	bne.n	80007d6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <SystemInit+0xec>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d005      	beq.n	80007be <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <SystemInit+0xec>)
 80007b4:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <SystemInit+0xf0>)
 80007b6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <SystemInit+0xec>)
 80007ba:	4a10      	ldr	r2, [pc, #64]	; (80007fc <SystemInit+0xf4>)
 80007bc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <SystemInit+0xec>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <SystemInit+0xec>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <SystemInit+0xec>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <SystemInit+0xec>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	61d3      	str	r3, [r2, #28]
  }
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00
 80007e8:	44020c00 	.word	0x44020c00
 80007ec:	eae2eae3 	.word	0xeae2eae3
 80007f0:	01010280 	.word	0x01010280
 80007f4:	40022000 	.word	0x40022000
 80007f8:	08192a3b 	.word	0x08192a3b
 80007fc:	4c5d6e7f 	.word	0x4c5d6e7f

08000800 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000802:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000804:	f7ff ff80 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <LoopForever+0x6>)
  ldr r1, =_edata
 800080a:	490d      	ldr	r1, [pc, #52]	; (8000840 <LoopForever+0xa>)
  ldr r2, =_sidata
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <LoopForever+0xe>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000820:	4c0a      	ldr	r4, [pc, #40]	; (800084c <LoopForever+0x16>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800082e:	f001 fa3f 	bl	8001cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000832:	f7ff fd2b 	bl	800028c <main>

08000836 <LoopForever>:

LoopForever:
    b LoopForever
 8000836:	e7fe      	b.n	8000836 <LoopForever>
  ldr   r0, =_estack
 8000838:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000844:	08001d28 	.word	0x08001d28
  ldr r2, =_sbss
 8000848:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800084c:	2000002c 	.word	0x2000002c

08000850 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_IRQHandler>
	...

08000854 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 f94d 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800085e:	f001 f8d7 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 8000862:	4602      	mov	r2, r0
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_Init+0x40>)
 8000866:	6a1b      	ldr	r3, [r3, #32]
 8000868:	f003 030f 	and.w	r3, r3, #15
 800086c:	490a      	ldr	r1, [pc, #40]	; (8000898 <HAL_Init+0x44>)
 800086e:	5ccb      	ldrb	r3, [r1, r3]
 8000870:	fa22 f303 	lsr.w	r3, r2, r3
 8000874:	4a09      	ldr	r2, [pc, #36]	; (800089c <HAL_Init+0x48>)
 8000876:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000878:	200f      	movs	r0, #15
 800087a:	f000 f811 	bl	80008a0 <HAL_InitTick>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e002      	b.n	800088e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000888:	f7ff ff0d 	bl	80006a6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	44020c00 	.word	0x44020c00
 8000898:	08001d10 	.word	0x08001d10
 800089c:	20000000 	.word	0x20000000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_InitTick+0x60>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e021      	b.n	80008f8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_InitTick+0x64>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_InitTick+0x60>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f939 	bl	8000b42 <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f911 	bl	8000b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_InitTick+0x68>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000008 	.word	0x20000008
 8000904:	20000000 	.word	0x20000000
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008
 8000930:	20000028 	.word	0x20000028

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000028 	.word	0x20000028

0800094c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff ffee 	bl	8000934 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffde 	bl	8000934 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	; (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	; (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	; 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	; 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f7ff ff8e 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff47 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b1c:	f7ff ff5e 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	6978      	ldr	r0, [r7, #20]
 8000b28:	f7ff ff90 	bl	8000a4c <NVIC_EncodePriority>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff5f 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffb2 	bl	8000ab4 <SysTick_Config>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000b6a:	e136      	b.n	8000dda <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	2101      	movs	r1, #1
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 8128 	beq.w	8000dd4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_Init+0x38>
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2b12      	cmp	r3, #18
 8000b92:	d125      	bne.n	8000be0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	08da      	lsrs	r2, r3, #3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3208      	adds	r2, #8
 8000b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	f003 0307 	and.w	r3, r3, #7
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	220f      	movs	r2, #15
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	f003 020f 	and.w	r2, r3, #15
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	08da      	lsrs	r2, r3, #3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3208      	adds	r2, #8
 8000bda:	6979      	ldr	r1, [r7, #20]
 8000bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2203      	movs	r2, #3
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0203 	and.w	r2, r3, #3
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d00b      	beq.n	8000c34 <HAL_GPIO_Init+0xd8>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d007      	beq.n	8000c34 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c28:	2b11      	cmp	r3, #17
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b12      	cmp	r3, #18
 8000c32:	d130      	bne.n	8000c96 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	2203      	movs	r2, #3
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	4013      	ands	r3, r2
 8000c78:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	091b      	lsrs	r3, r3, #4
 8000c80:	f003 0201 	and.w	r2, r3, #1
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d017      	beq.n	8000cce <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d07c      	beq.n	8000dd4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000cda:	4a47      	ldr	r2, [pc, #284]	; (8000df8 <HAL_GPIO_Init+0x29c>)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	3318      	adds	r3, #24
 8000ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	0a9a      	lsrs	r2, r3, #10
 8000d02:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <HAL_GPIO_Init+0x2a0>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	f002 0203 	and.w	r2, r2, #3
 8000d0c:	00d2      	lsls	r2, r2, #3
 8000d0e:	4093      	lsls	r3, r2
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000d16:	4938      	ldr	r1, [pc, #224]	; (8000df8 <HAL_GPIO_Init+0x29c>)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3318      	adds	r3, #24
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000d24:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <HAL_GPIO_Init+0x29c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000d48:	4a2b      	ldr	r2, [pc, #172]	; (8000df8 <HAL_GPIO_Init+0x29c>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <HAL_GPIO_Init+0x29c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000d72:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <HAL_GPIO_Init+0x29c>)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <HAL_GPIO_Init+0x29c>)
 8000d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d7e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	4013      	ands	r3, r2
 8000d88:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000d9e:	4a16      	ldr	r2, [pc, #88]	; (8000df8 <HAL_GPIO_Init+0x29c>)
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_GPIO_Init+0x29c>)
 8000da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4013      	ands	r3, r2
 8000db6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_GPIO_Init+0x29c>)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	fa22 f303 	lsr.w	r3, r2, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f47f aec1 	bne.w	8000b6c <HAL_GPIO_Init+0x10>
  }
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	44022000 	.word	0x44022000
 8000dfc:	002f7f7f 	.word	0x002f7f7f

08000e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e10:	787b      	ldrb	r3, [r7, #1]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e1e:	887a      	ldrh	r2, [r7, #2]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	f000 bc28 	b.w	8001694 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e44:	4b94      	ldr	r3, [pc, #592]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	f003 0318 	and.w	r3, r3, #24
 8000e4c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8000e4e:	4b92      	ldr	r3, [pc, #584]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d05b      	beq.n	8000f1c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d005      	beq.n	8000e76 <HAL_RCC_OscConfig+0x46>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	2b18      	cmp	r3, #24
 8000e6e:	d114      	bne.n	8000e9a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d111      	bne.n	8000e9a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	f000 bc08 	b.w	8001694 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8000e84:	4b84      	ldr	r3, [pc, #528]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	041b      	lsls	r3, r3, #16
 8000e92:	4981      	ldr	r1, [pc, #516]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000e94:	4313      	orrs	r3, r2
 8000e96:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000e98:	e040      	b.n	8000f1c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d023      	beq.n	8000eea <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000ea2:	4b7d      	ldr	r3, [pc, #500]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a7c      	ldr	r2, [pc, #496]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eae:	f7ff fd41 	bl	8000934 <HAL_GetTick>
 8000eb2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fd3d 	bl	8000934 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e3e5      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8000ec8:	4b73      	ldr	r3, [pc, #460]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f0      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8000ed4:	4b70      	ldr	r3, [pc, #448]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	041b      	lsls	r3, r3, #16
 8000ee2:	496d      	ldr	r1, [pc, #436]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	618b      	str	r3, [r1, #24]
 8000ee8:	e018      	b.n	8000f1c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000eea:	4b6b      	ldr	r3, [pc, #428]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a6a      	ldr	r2, [pc, #424]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef6:	f7ff fd1d 	bl	8000934 <HAL_GetTick>
 8000efa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8000efe:	f7ff fd19 	bl	8000934 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e3c1      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8000f10:	4b61      	ldr	r3, [pc, #388]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1f0      	bne.n	8000efe <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80a0 	beq.w	800106a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	2b10      	cmp	r3, #16
 8000f2e:	d005      	beq.n	8000f3c <HAL_RCC_OscConfig+0x10c>
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2b18      	cmp	r3, #24
 8000f34:	d109      	bne.n	8000f4a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d106      	bne.n	8000f4a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f040 8092 	bne.w	800106a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e3a4      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f52:	d106      	bne.n	8000f62 <HAL_RCC_OscConfig+0x132>
 8000f54:	4b50      	ldr	r3, [pc, #320]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a4f      	ldr	r2, [pc, #316]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e058      	b.n	8001014 <HAL_RCC_OscConfig+0x1e4>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d112      	bne.n	8000f90 <HAL_RCC_OscConfig+0x160>
 8000f6a:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a4a      	ldr	r2, [pc, #296]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b48      	ldr	r3, [pc, #288]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a47      	ldr	r2, [pc, #284]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000f7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b45      	ldr	r3, [pc, #276]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a44      	ldr	r2, [pc, #272]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e041      	b.n	8001014 <HAL_RCC_OscConfig+0x1e4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f98:	d112      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x190>
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a3e      	ldr	r2, [pc, #248]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a3b      	ldr	r2, [pc, #236]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000fac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b39      	ldr	r3, [pc, #228]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a38      	ldr	r2, [pc, #224]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e029      	b.n	8001014 <HAL_RCC_OscConfig+0x1e4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8000fc8:	d112      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x1c0>
 8000fca:	4b33      	ldr	r3, [pc, #204]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a32      	ldr	r2, [pc, #200]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b30      	ldr	r3, [pc, #192]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2f      	ldr	r2, [pc, #188]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000fdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a2c      	ldr	r2, [pc, #176]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e011      	b.n	8001014 <HAL_RCC_OscConfig+0x1e4>
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a28      	ldr	r2, [pc, #160]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a25      	ldr	r2, [pc, #148]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8001002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 800100e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d013      	beq.n	8001044 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101c:	f7ff fc8a 	bl	8000934 <HAL_GetTick>
 8001020:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001024:	f7ff fc86 	bl	8000934 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e32e      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f0      	beq.n	8001024 <HAL_RCC_OscConfig+0x1f4>
 8001042:	e012      	b.n	800106a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001044:	f7ff fc76 	bl	8000934 <HAL_GetTick>
 8001048:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800104c:	f7ff fc72 	bl	8000934 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b64      	cmp	r3, #100	; 0x64
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e31a      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f0      	bne.n	800104c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 809a 	beq.w	80011ac <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_RCC_OscConfig+0x25a>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	2b18      	cmp	r3, #24
 8001082:	d149      	bne.n	8001118 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d146      	bne.n	8001118 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d104      	bne.n	800109c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e2fe      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
 8001096:	bf00      	nop
 8001098:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d11c      	bne.n	80010dc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80010a2:	4b9a      	ldr	r3, [pc, #616]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0218 	and.w	r2, r3, #24
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d014      	beq.n	80010dc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80010b2:	4b96      	ldr	r3, [pc, #600]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 0218 	bic.w	r2, r3, #24
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	4993      	ldr	r1, [pc, #588]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80010c4:	f000 fdd0 	bl	8001c68 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010c8:	4b91      	ldr	r3, [pc, #580]	; (8001310 <HAL_RCC_OscConfig+0x4e0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fbe7 	bl	80008a0 <HAL_InitTick>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e2db      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fc2a 	bl	8000934 <HAL_GetTick>
 80010e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc26 	bl	8000934 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e2ce      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f6:	4b85      	ldr	r3, [pc, #532]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001102:	4b82      	ldr	r3, [pc, #520]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	041b      	lsls	r3, r3, #16
 8001110:	497e      	ldr	r1, [pc, #504]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 8001112:	4313      	orrs	r3, r2
 8001114:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001116:	e049      	b.n	80011ac <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d02c      	beq.n	800117a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001120:	4b7a      	ldr	r3, [pc, #488]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 0218 	bic.w	r2, r3, #24
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4977      	ldr	r1, [pc, #476]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 800112e:	4313      	orrs	r3, r2
 8001130:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001132:	4b76      	ldr	r3, [pc, #472]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a75      	ldr	r2, [pc, #468]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113e:	f7ff fbf9 	bl	8000934 <HAL_GetTick>
 8001142:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001146:	f7ff fbf5 	bl	8000934 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e29d      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001158:	4b6c      	ldr	r3, [pc, #432]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001164:	4b69      	ldr	r3, [pc, #420]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	041b      	lsls	r3, r3, #16
 8001172:	4966      	ldr	r1, [pc, #408]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 8001174:	4313      	orrs	r3, r2
 8001176:	610b      	str	r3, [r1, #16]
 8001178:	e018      	b.n	80011ac <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800117a:	4b64      	ldr	r3, [pc, #400]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a63      	ldr	r2, [pc, #396]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 8001180:	f023 0301 	bic.w	r3, r3, #1
 8001184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001186:	f7ff fbd5 	bl	8000934 <HAL_GetTick>
 800118a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800118e:	f7ff fbd1 	bl	8000934 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e279      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011a0:	4b5a      	ldr	r3, [pc, #360]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f0      	bne.n	800118e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d03c      	beq.n	8001232 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d01c      	beq.n	80011fa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c0:	4b52      	ldr	r3, [pc, #328]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80011c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011c6:	4a51      	ldr	r2, [pc, #324]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80011c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d0:	f7ff fbb0 	bl	8000934 <HAL_GetTick>
 80011d4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80011d8:	f7ff fbac 	bl	8000934 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e254      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80011ea:	4b48      	ldr	r3, [pc, #288]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80011ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0ef      	beq.n	80011d8 <HAL_RCC_OscConfig+0x3a8>
 80011f8:	e01b      	b.n	8001232 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80011fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001200:	4a42      	ldr	r2, [pc, #264]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 8001202:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001206:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120a:	f7ff fb93 	bl	8000934 <HAL_GetTick>
 800120e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001212:	f7ff fb8f 	bl	8000934 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e237      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001224:	4b39      	ldr	r3, [pc, #228]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 8001226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800122a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1ef      	bne.n	8001212 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 80d2 	beq.w	80013e4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <HAL_RCC_OscConfig+0x4e4>)
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d118      	bne.n	800127e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800124c:	4b31      	ldr	r3, [pc, #196]	; (8001314 <HAL_RCC_OscConfig+0x4e4>)
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_RCC_OscConfig+0x4e4>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001258:	f7ff fb6c 	bl	8000934 <HAL_GetTick>
 800125c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001260:	f7ff fb68 	bl	8000934 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e210      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <HAL_RCC_OscConfig+0x4e4>)
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d108      	bne.n	8001298 <HAL_RCC_OscConfig+0x468>
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 8001288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800128c:	4a1f      	ldr	r2, [pc, #124]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001296:	e074      	b.n	8001382 <HAL_RCC_OscConfig+0x552>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d118      	bne.n	80012d2 <HAL_RCC_OscConfig+0x4a2>
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80012a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012a6:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80012b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012b6:	4a15      	ldr	r2, [pc, #84]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80012b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80012c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012c6:	4a11      	ldr	r2, [pc, #68]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80012c8:	f023 0304 	bic.w	r3, r3, #4
 80012cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012d0:	e057      	b.n	8001382 <HAL_RCC_OscConfig+0x552>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d11e      	bne.n	8001318 <HAL_RCC_OscConfig+0x4e8>
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80012dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80012ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80012f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80012fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001300:	4a02      	ldr	r2, [pc, #8]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800130a:	e03a      	b.n	8001382 <HAL_RCC_OscConfig+0x552>
 800130c:	44020c00 	.word	0x44020c00
 8001310:	20000004 	.word	0x20000004
 8001314:	44020800 	.word	0x44020800
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b85      	cmp	r3, #133	; 0x85
 800131e:	d118      	bne.n	8001352 <HAL_RCC_OscConfig+0x522>
 8001320:	4ba2      	ldr	r3, [pc, #648]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001326:	4aa1      	ldr	r2, [pc, #644]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001330:	4b9e      	ldr	r3, [pc, #632]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001336:	4a9d      	ldr	r2, [pc, #628]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001340:	4b9a      	ldr	r3, [pc, #616]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001346:	4a99      	ldr	r2, [pc, #612]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001350:	e017      	b.n	8001382 <HAL_RCC_OscConfig+0x552>
 8001352:	4b96      	ldr	r3, [pc, #600]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001358:	4a94      	ldr	r2, [pc, #592]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001362:	4b92      	ldr	r3, [pc, #584]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001368:	4a90      	ldr	r2, [pc, #576]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 800136a:	f023 0304 	bic.w	r3, r3, #4
 800136e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001372:	4b8e      	ldr	r3, [pc, #568]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001378:	4a8c      	ldr	r2, [pc, #560]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 800137a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800137e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d016      	beq.n	80013b8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138a:	f7ff fad3 	bl	8000934 <HAL_GetTick>
 800138e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff facf 	bl	8000934 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e175      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013a8:	4b80      	ldr	r3, [pc, #512]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 80013aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0ed      	beq.n	8001392 <HAL_RCC_OscConfig+0x562>
 80013b6:	e015      	b.n	80013e4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff fabc 	bl	8000934 <HAL_GetTick>
 80013bc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fab8 	bl	8000934 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e15e      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013d6:	4b75      	ldr	r3, [pc, #468]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 80013d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ed      	bne.n	80013c0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0320 	and.w	r3, r3, #32
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d036      	beq.n	800145e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d019      	beq.n	800142c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013f8:	4b6c      	ldr	r3, [pc, #432]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a6b      	ldr	r2, [pc, #428]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 80013fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001402:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fa96 	bl	8000934 <HAL_GetTick>
 8001408:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800140c:	f7ff fa92 	bl	8000934 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e13a      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800141e:	4b63      	ldr	r3, [pc, #396]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x5dc>
 800142a:	e018      	b.n	800145e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800142c:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a5e      	ldr	r2, [pc, #376]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001436:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001438:	f7ff fa7c 	bl	8000934 <HAL_GetTick>
 800143c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001440:	f7ff fa78 	bl	8000934 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e120      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001452:	4b56      	ldr	r3, [pc, #344]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8115 	beq.w	8001692 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b18      	cmp	r3, #24
 800146c:	f000 80af 	beq.w	80015ce <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	2b02      	cmp	r3, #2
 8001476:	f040 8086 	bne.w	8001586 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800147a:	4b4c      	ldr	r3, [pc, #304]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a4b      	ldr	r2, [pc, #300]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001486:	f7ff fa55 	bl	8000934 <HAL_GetTick>
 800148a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800148e:	f7ff fa51 	bl	8000934 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e0f9      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80014a0:	4b42      	ldr	r3, [pc, #264]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80014ac:	4b3f      	ldr	r3, [pc, #252]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80014b4:	f023 0303 	bic.w	r3, r3, #3
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014c0:	0212      	lsls	r2, r2, #8
 80014c2:	430a      	orrs	r2, r1
 80014c4:	4939      	ldr	r1, [pc, #228]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	628b      	str	r3, [r1, #40]	; 0x28
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d8:	3b01      	subs	r3, #1
 80014da:	025b      	lsls	r3, r3, #9
 80014dc:	b29b      	uxth	r3, r3
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e4:	3b01      	subs	r3, #1
 80014e6:	041b      	lsls	r3, r3, #16
 80014e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	3b01      	subs	r3, #1
 80014f4:	061b      	lsls	r3, r3, #24
 80014f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80014fa:	492c      	ldr	r1, [pc, #176]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001500:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	4a29      	ldr	r2, [pc, #164]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001506:	f023 0310 	bic.w	r3, r3, #16
 800150a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	4a26      	ldr	r2, [pc, #152]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151a:	4a24      	ldr	r2, [pc, #144]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 800151c:	f043 0310 	orr.w	r3, r3, #16
 8001520:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	f023 020c 	bic.w	r2, r3, #12
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	491f      	ldr	r1, [pc, #124]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001530:	4313      	orrs	r3, r2
 8001532:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	f023 0220 	bic.w	r2, r3, #32
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001540:	491a      	ldr	r1, [pc, #104]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001542:	4313      	orrs	r3, r2
 8001544:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	4a18      	ldr	r2, [pc, #96]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff f9e9 	bl	8000934 <HAL_GetTick>
 8001562:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001566:	f7ff f9e5 	bl	8000934 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e08d      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x736>
 8001584:	e085      	b.n	8001692 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_RCC_OscConfig+0x77c>)
 800158c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff f9cf 	bl	8000934 <HAL_GetTick>
 8001596:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800159a:	f7ff f9cb 	bl	8000934 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d903      	bls.n	80015b0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e073      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
 80015ac:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_RCC_OscConfig+0x86c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1ee      	bne.n	800159a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80015bc:	4b37      	ldr	r3, [pc, #220]	; (800169c <HAL_RCC_OscConfig+0x86c>)
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	4a36      	ldr	r2, [pc, #216]	; (800169c <HAL_RCC_OscConfig+0x86c>)
 80015c2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80015c6:	f023 0303 	bic.w	r3, r3, #3
 80015ca:	6293      	str	r3, [r2, #40]	; 0x28
 80015cc:	e061      	b.n	8001692 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_RCC_OscConfig+0x86c>)
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80015d4:	4b31      	ldr	r3, [pc, #196]	; (800169c <HAL_RCC_OscConfig+0x86c>)
 80015d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d031      	beq.n	8001646 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	f003 0203 	and.w	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d12a      	bne.n	8001646 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	0a1b      	lsrs	r3, r3, #8
 80015f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d122      	bne.n	8001646 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d11a      	bne.n	8001646 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	0a5b      	lsrs	r3, r3, #9
 8001614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800161e:	429a      	cmp	r2, r3
 8001620:	d111      	bne.n	8001646 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	0c1b      	lsrs	r3, r3, #16
 8001626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d108      	bne.n	8001646 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	0e1b      	lsrs	r3, r3, #24
 8001638:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e024      	b.n	8001694 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_RCC_OscConfig+0x86c>)
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	08db      	lsrs	r3, r3, #3
 8001650:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001658:	429a      	cmp	r2, r3
 800165a:	d01a      	beq.n	8001692 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_RCC_OscConfig+0x86c>)
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <HAL_RCC_OscConfig+0x86c>)
 8001662:	f023 0310 	bic.w	r3, r3, #16
 8001666:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff f964 	bl	8000934 <HAL_GetTick>
 800166c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800166e:	bf00      	nop
 8001670:	f7ff f960 	bl	8000934 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	4293      	cmp	r3, r2
 800167a:	d0f9      	beq.n	8001670 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_RCC_OscConfig+0x86c>)
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_RCC_OscConfig+0x86c>)
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_RCC_OscConfig+0x86c>)
 800168c:	f043 0310 	orr.w	r3, r3, #16
 8001690:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	44020c00 	.word	0x44020c00

080016a0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e19e      	b.n	80019f2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016b4:	4b83      	ldr	r3, [pc, #524]	; (80018c4 <HAL_RCC_ClockConfig+0x224>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d910      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b80      	ldr	r3, [pc, #512]	; (80018c4 <HAL_RCC_ClockConfig+0x224>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 020f 	bic.w	r2, r3, #15
 80016ca:	497e      	ldr	r1, [pc, #504]	; (80018c4 <HAL_RCC_ClockConfig+0x224>)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b7c      	ldr	r3, [pc, #496]	; (80018c4 <HAL_RCC_ClockConfig+0x224>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e186      	b.n	80019f2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d012      	beq.n	8001716 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695a      	ldr	r2, [r3, #20]
 80016f4:	4b74      	ldr	r3, [pc, #464]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016fe:	429a      	cmp	r2, r3
 8001700:	d909      	bls.n	8001716 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001702:	4b71      	ldr	r3, [pc, #452]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	496d      	ldr	r1, [pc, #436]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 8001712:	4313      	orrs	r3, r2
 8001714:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d012      	beq.n	8001748 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001730:	429a      	cmp	r2, r3
 8001732:	d909      	bls.n	8001748 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001734:	4b64      	ldr	r3, [pc, #400]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	4961      	ldr	r1, [pc, #388]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 8001744:	4313      	orrs	r3, r2
 8001746:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d010      	beq.n	8001776 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001760:	429a      	cmp	r2, r3
 8001762:	d908      	bls.n	8001776 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001764:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4955      	ldr	r1, [pc, #340]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 8001772:	4313      	orrs	r3, r2
 8001774:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d010      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	429a      	cmp	r2, r3
 8001790:	d908      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001792:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	f023 020f 	bic.w	r2, r3, #15
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	494a      	ldr	r1, [pc, #296]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8093 	beq.w	80018d8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d121      	bne.n	800180a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e113      	b.n	80019f2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d115      	bne.n	800180a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e107      	b.n	80019f2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80017ea:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0fb      	b.n	80019f2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0f3      	b.n	80019f2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	492c      	ldr	r1, [pc, #176]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 8001818:	4313      	orrs	r3, r2
 800181a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800181c:	f7ff f88a 	bl	8000934 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d112      	bne.n	8001850 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7ff f882 	bl	8000934 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e0d7      	b.n	80019f2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 0318 	and.w	r3, r3, #24
 800184a:	2b18      	cmp	r3, #24
 800184c:	d1ee      	bne.n	800182c <HAL_RCC_ClockConfig+0x18c>
 800184e:	e043      	b.n	80018d8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d112      	bne.n	800187e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800185a:	f7ff f86b 	bl	8000934 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e0c0      	b.n	80019f2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	f003 0318 	and.w	r3, r3, #24
 8001878:	2b10      	cmp	r3, #16
 800187a:	d1ee      	bne.n	800185a <HAL_RCC_ClockConfig+0x1ba>
 800187c:	e02c      	b.n	80018d8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d122      	bne.n	80018cc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001888:	f7ff f854 	bl	8000934 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e0a9      	b.n	80019f2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_RCC_ClockConfig+0x228>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 0318 	and.w	r3, r3, #24
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d1ee      	bne.n	8001888 <HAL_RCC_ClockConfig+0x1e8>
 80018aa:	e015      	b.n	80018d8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff f842 	bl	8000934 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d906      	bls.n	80018cc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e097      	b.n	80019f2 <HAL_RCC_ClockConfig+0x352>
 80018c2:	bf00      	nop
 80018c4:	40022000 	.word	0x40022000
 80018c8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018cc:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	f003 0318 	and.w	r3, r3, #24
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1e9      	bne.n	80018ac <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d010      	beq.n	8001906 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	4b44      	ldr	r3, [pc, #272]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f003 030f 	and.w	r3, r3, #15
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d208      	bcs.n	8001906 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80018f4:	4b41      	ldr	r3, [pc, #260]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f023 020f 	bic.w	r2, r3, #15
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	493e      	ldr	r1, [pc, #248]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 8001902:	4313      	orrs	r3, r2
 8001904:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001906:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <HAL_RCC_ClockConfig+0x360>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d210      	bcs.n	8001936 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001914:	4b3a      	ldr	r3, [pc, #232]	; (8001a00 <HAL_RCC_ClockConfig+0x360>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 020f 	bic.w	r2, r3, #15
 800191c:	4938      	ldr	r1, [pc, #224]	; (8001a00 <HAL_RCC_ClockConfig+0x360>)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001924:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_RCC_ClockConfig+0x360>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d001      	beq.n	8001936 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e05d      	b.n	80019f2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	d010      	beq.n	8001964 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800194e:	429a      	cmp	r2, r3
 8001950:	d208      	bcs.n	8001964 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	4927      	ldr	r1, [pc, #156]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 8001960:	4313      	orrs	r3, r2
 8001962:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d012      	beq.n	8001996 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800197e:	429a      	cmp	r2, r3
 8001980:	d209      	bcs.n	8001996 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	491a      	ldr	r1, [pc, #104]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 8001992:	4313      	orrs	r3, r2
 8001994:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d012      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	0a1b      	lsrs	r3, r3, #8
 80019ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d209      	bcs.n	80019c8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80019c8:	f000 f822 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_ClockConfig+0x35c>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	490b      	ldr	r1, [pc, #44]	; (8001a04 <HAL_RCC_ClockConfig+0x364>)
 80019d8:	5ccb      	ldrb	r3, [r1, r3]
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_RCC_ClockConfig+0x368>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x36c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe ff5a 	bl	80008a0 <HAL_InitTick>
 80019ec:	4603      	mov	r3, r0
 80019ee:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80019f0:	7afb      	ldrb	r3, [r7, #11]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	44020c00 	.word	0x44020c00
 8001a00:	40022000 	.word	0x40022000
 8001a04:	08001d10 	.word	0x08001d10
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001a16:	4b8c      	ldr	r3, [pc, #560]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 0318 	and.w	r3, r3, #24
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d102      	bne.n	8001a28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001a22:	4b8a      	ldr	r3, [pc, #552]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x23c>)
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	e107      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a28:	4b87      	ldr	r3, [pc, #540]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f003 0318 	and.w	r3, r3, #24
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d112      	bne.n	8001a5a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001a34:	4b84      	ldr	r3, [pc, #528]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0320 	and.w	r3, r3, #32
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001a40:	4b81      	ldr	r3, [pc, #516]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	08db      	lsrs	r3, r3, #3
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	4a81      	ldr	r2, [pc, #516]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x240>)
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e0f1      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001a54:	4b7e      	ldr	r3, [pc, #504]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x240>)
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	e0ee      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a5a:	4b7b      	ldr	r3, [pc, #492]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 0318 	and.w	r3, r3, #24
 8001a62:	2b10      	cmp	r3, #16
 8001a64:	d102      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a66:	4b7b      	ldr	r3, [pc, #492]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x244>)
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e0e5      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4b76      	ldr	r3, [pc, #472]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f003 0318 	and.w	r3, r3, #24
 8001a74:	2b18      	cmp	r3, #24
 8001a76:	f040 80dd 	bne.w	8001c34 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001a7a:	4b73      	ldr	r3, [pc, #460]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001a84:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001a90:	4b6d      	ldr	r3, [pc, #436]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001a9c:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001aa0:	08db      	lsrs	r3, r3, #3
 8001aa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80b7 	beq.w	8001c2e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0xbe>
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d056      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0x16a>
 8001acc:	e077      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001ace:	4b5e      	ldr	r3, [pc, #376]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0320 	and.w	r3, r3, #32
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d02d      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001ada:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	08db      	lsrs	r3, r3, #3
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	4a5a      	ldr	r2, [pc, #360]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x240>)
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b14:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b18:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001c58 <HAL_RCC_GetSysClockFreq+0x248>
 8001b1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b30:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001b34:	e065      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b40:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001c5c <HAL_RCC_GetSysClockFreq+0x24c>
 8001b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b48:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b58:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b5c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001c58 <HAL_RCC_GetSysClockFreq+0x248>
 8001b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b74:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001b78:	e043      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b84:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001c60 <HAL_RCC_GetSysClockFreq+0x250>
 8001b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ba0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001c58 <HAL_RCC_GetSysClockFreq+0x248>
 8001ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001bac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8001bbc:	e021      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001c64 <HAL_RCC_GetSysClockFreq+0x254>
 8001bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001be0:	ed97 6a02 	vldr	s12, [r7, #8]
 8001be4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001c58 <HAL_RCC_GetSysClockFreq+0x248>
 8001be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001bf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001c00:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x238>)
 8001c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c1a:	edd7 6a06 	vldr	s13, [r7, #24]
 8001c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c26:	ee17 3a90 	vmov	r3, s15
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	e004      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e001      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x240>)
 8001c36:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8001c38:	69fb      	ldr	r3, [r7, #28]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	44020c00 	.word	0x44020c00
 8001c4c:	003d0900 	.word	0x003d0900
 8001c50:	03d09000 	.word	0x03d09000
 8001c54:	007a1200 	.word	0x007a1200
 8001c58:	46000000 	.word	0x46000000
 8001c5c:	4c742400 	.word	0x4c742400
 8001c60:	4af42400 	.word	0x4af42400
 8001c64:	4a742400 	.word	0x4a742400

08001c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001c6c:	f7ff fed0 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001c74:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001c76:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001c7a:	4907      	ldr	r1, [pc, #28]	; (8001c98 <HAL_RCC_GetHCLKFreq+0x30>)
 8001c7c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001c7e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001c82:	fa22 f303 	lsr.w	r3, r2, r3
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <HAL_RCC_GetHCLKFreq+0x34>)
 8001c88:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_RCC_GetHCLKFreq+0x34>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	44020c00 	.word	0x44020c00
 8001c98:	08001d10 	.word	0x08001d10
 8001c9c:	20000000 	.word	0x20000000

08001ca0 <memset>:
 8001ca0:	4402      	add	r2, r0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d100      	bne.n	8001caa <memset+0xa>
 8001ca8:	4770      	bx	lr
 8001caa:	f803 1b01 	strb.w	r1, [r3], #1
 8001cae:	e7f9      	b.n	8001ca4 <memset+0x4>

08001cb0 <__libc_init_array>:
 8001cb0:	b570      	push	{r4, r5, r6, lr}
 8001cb2:	4d0d      	ldr	r5, [pc, #52]	; (8001ce8 <__libc_init_array+0x38>)
 8001cb4:	2600      	movs	r6, #0
 8001cb6:	4c0d      	ldr	r4, [pc, #52]	; (8001cec <__libc_init_array+0x3c>)
 8001cb8:	1b64      	subs	r4, r4, r5
 8001cba:	10a4      	asrs	r4, r4, #2
 8001cbc:	42a6      	cmp	r6, r4
 8001cbe:	d109      	bne.n	8001cd4 <__libc_init_array+0x24>
 8001cc0:	4d0b      	ldr	r5, [pc, #44]	; (8001cf0 <__libc_init_array+0x40>)
 8001cc2:	2600      	movs	r6, #0
 8001cc4:	4c0b      	ldr	r4, [pc, #44]	; (8001cf4 <__libc_init_array+0x44>)
 8001cc6:	f000 f817 	bl	8001cf8 <_init>
 8001cca:	1b64      	subs	r4, r4, r5
 8001ccc:	10a4      	asrs	r4, r4, #2
 8001cce:	42a6      	cmp	r6, r4
 8001cd0:	d105      	bne.n	8001cde <__libc_init_array+0x2e>
 8001cd2:	bd70      	pop	{r4, r5, r6, pc}
 8001cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cd8:	3601      	adds	r6, #1
 8001cda:	4798      	blx	r3
 8001cdc:	e7ee      	b.n	8001cbc <__libc_init_array+0xc>
 8001cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ce2:	3601      	adds	r6, #1
 8001ce4:	4798      	blx	r3
 8001ce6:	e7f2      	b.n	8001cce <__libc_init_array+0x1e>
 8001ce8:	08001d20 	.word	0x08001d20
 8001cec:	08001d20 	.word	0x08001d20
 8001cf0:	08001d20 	.word	0x08001d20
 8001cf4:	08001d24 	.word	0x08001d24

08001cf8 <_init>:
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	bf00      	nop
 8001cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfe:	bc08      	pop	{r3}
 8001d00:	469e      	mov	lr, r3
 8001d02:	4770      	bx	lr

08001d04 <_fini>:
 8001d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d06:	bf00      	nop
 8001d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d0a:	bc08      	pop	{r3}
 8001d0c:	469e      	mov	lr, r3
 8001d0e:	4770      	bx	lr
